entity Img {
    Path: @String
}

entity Food {
    Name: String
    Img: ?Img
    Price: Int
}

entity Table {
    CurOrder: ?Order
}

entity OrderItem {
    Food: Food
    Count: Int
}

entity Order {
    Table: Table
    Closed: Bool
    Items: [@OrderItem]
}

fn TableOrderAppend(TId: Table.id, FId: Food.Id, Count: Int) {
    CurOrderItems <- TId.Table.CurOrder.Items
    TheOrderItem <~ CurOrderItems.first{OrderItem.Food.Id == &FId}
        ?{ TheOrderItem.Count += Count } 
        :{ CurOrderItems ++ OrderItem(FId.Food, Count) }
}

fn TableOrderRemove(TId: Table.id, FId: Food.Id, Count: Int) {
    CurOrderItems <- TId.Table.CurOrder.Items
    TheOrderItem <- CurOrderItems.first{OrderItem.Food.Id == &FId} 
    TheOrderItem.Count == Count 
        ?{ TheOrderItem.delete }
        :{ TheOrderItem.Count -= Count }
}

fn TableOrderClear(TId: Table.id, FId: Food.Id) {
    TId.Table.CurOrder.Items.delete
}

fn OrderPrice(OId: Order.Id) -> Int {
    OId.Order.Items.map{OrderItem.Food.Price * OrderItem.Count}.sum
}

fn TableOrderPrice(TId: Table.Id) -> Int {
    OrderPrice(TId.Table.CurOrder)
}

fn TableOrderPrice(TId: Table.Id) {
    $pay(TableOrderPrice(TId))
    TId.Table.CurOrder.Closed = True
    TId.Table.CurOrder = Order(TId.Table, False, [])
}

fn TableOrders(TId: Table.Id) -> [Order] {
    Order.filter{Order.Table.Id == TId}
}
