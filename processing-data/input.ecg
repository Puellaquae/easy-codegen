entity Img {
    Path: @String
}

entity Food {
    Name: String
    Img: ?Img
    Price: Int
}

entity Table {
    CurOrder: ?Order
}

entity OrderItem {
    Food: Food
    Count: Int
}

entity Order {
    Table: Table
    Closed: Bool
    Items: [@OrderItem]
}

fn TableOrderAppend(TId: Table.id, FId: Food.Id, Count: Int) {
    (let CurOrderItems (Items (CurOrder (Table TId))))
    (let TheOrderItem (first CurOrderItems (lambda I (== (Id (Food I)) FId))))
    (if (ok TheOrderItem) (+= (Count TheOrderItem) Count) (append CurOrderItems (OrderItem (Food FId) Count)))
}

fn TableOrderRemove(TId: Table.id, FId: Food.Id, Count: Int) {
    (let CurOrderItems (Items (CurOrder (Table TId))))
    (let TheOrderItem (first CurOrderItems (lambda I (== (Id (Food I)) FId))))
    (if (== (Count TheOrderItem) Count) (delete TheOrderItem) (-= (Count TheOrderItem) Count))
}

fn TableOrderClear(TId: Table.id, FId: Food.Id) {
    (delete (Items (CurOrder (Table TId))))
}

fn OrderPrice(OId: Order.Id) -> Int {
    (sum (map (Items (Order OId)) (lambda I (* (Count I) (Price (Food I))))))
}

fn TableOrderPrice(TId: Table.Id) -> Int {
    (OrderPrice (CurOrder (Table TId)))
}

fn Pay(Int)

fn PayTableOrder(TId: Table.Id) {
    (Pay (TableOrderPrice TId))
    (= (Closed (CurOrder (Table (TId)))) True)
    (= (CurOrder (Table TId)) (Order (Table TId) False []))
}

fn TableOrders(TId: Table.Id) -> [Order] {
    (filter Order (lambda O (== (Id (Table O)) TId)))
}

route {
    "cate/:cid" {
        "goods" {
            get => category_goods(cid)
            post => category_new_goods(cid, _)
        }
    }
}
