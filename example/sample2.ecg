entity Permission {
    User: User
    Permissions: [@String]
}
        
entity User {
    UserName: @String
    PassWord: String
    Age: Int
}

entity Token {
    ForUser: User
    Token: @String
} 
        
entity Goods {
    Owner: User
    Name: String
    Price: Int
    Stock: Int      
    Description: String
}
        
entity Order {
    Buyer: User
    Good: Goods
    Count: Int
    TotalPrice: Int
}
        

fn permissionCheck(uid: User.Id, requirePermission: String) -> Bool {
    return Permission
            .filter(u => u.User.Id.eq(uid))
            .first()
            .Permissions
            .filter(p => p.eq(requirePermission))
            .count()
            .neq(0)
}

fn userPermissions(uid: User.Id) -> [String] {
    return Permission
            .filter(u => u.User.Id.eq(uid))
            .first()
            .Permissions
}

fn addPermission(uid: User.Id, permission: String) {
    Permission.filter(u => u.User.Id.eq(uid)).count().eq(0).cond(() => {  
        Permission.append(Permission.new({
            User: uid.User
        }))
    }, () => { })
    Permission.filter(u => u.User.Id.eq(uid)).first().Permissions.append(permission)
}

fn removePermission(uid: User.Id, permission: String) {
    Permission
            .filter(u => u.User.Id.eq(uid))
            .first()
            .Permissions
            .remove(u => u.eq(permission))
}
        
fn signup(u: User) {
    User.append(u)
}

fn signdown(uid: User.Id) {
    User.remove(u => u.Id.eq(uid))
}

fn uuid() -> String

fn login(name: User.UserName, pw: User.PassWord) -> Token.Token {
    name.User.PassWord.eq(pw).assert("用户名或密码不正确")

    let newTok = uuid().pin()
    Token.append(Token.new({
        ForUser: name.User,
        Token: newTok
    }))
    return newTok
}

fn logout(tok: Token.Token) {
    Token.remove(t => t.Token.eq(tok))
}

fn tokenToUser(tok: Token.Token) -> User {
    return tok.Token.ForUser
}
           
fn getAllGoods() -> [Goods] {
    return Goods
}

fn newGoods(g: Goods) {
    Goods.append(g)
}

fn removeGoods(gid: Goods.Id) {
    Goods.remove(g => g.Id.eq(gid))
}

fn updateGoods(gid: Goods.Id, g: Goods) {
    gid.Goods.set(g)
}
        
fn newOrder(buyerId: User.Id, gid: Goods.Id, count: Int) {
    Order.append(Order.new({
        Buyer: buyerId.User,
        Good: gid.Goods,
        Count: count,
        TotalPrice: gid.Goods.Price.mul(count).pin()
    }))
}

fn removeOrder(oid: Order.Id) {
    Order.remove(o => o.Id.eq(oid))
}

fn getAllOrder() -> [Order] {
    return Order
}

fn getOnesOrder(uid: User.Id) -> [Order] {
    return Order.filter(o => o.Buyer.Id.eq(uid))
}

route {
    "user/:uid" {
        "permis" {
            get => userPermissions(uid)
            "new" {
                post => addPermission(uid, _)
            }
            "remove" {
                post => removePermission(uid, _)
            }
        }
    }
}